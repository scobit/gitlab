image: node:17-alpine

workflow:
  rules:
   - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
     when: never
   - when: always

stages:
  - test
  - build
  - deploy
  
variables:
  image_repository: docker.io/my-docker-id/myapp
  image_tag: v1.0  

run_unit_tests:
  tags:
    - ec2
	- aws
	- remote
  image: node:17-alpine
  stage: test
  before_script:
    - echo "Preparing test data"
	- pwd
	- ls
	- mkdir test-data
	- ls
	- chmod +x prepare-tests.sh
	- ./prepare-tests.sh
  script:
    - echo "Running unit tests for micro service $MICRO_SERVICE_NAME ..."
	- npm version
  after_script:
    - echo "Cleaning up temporary file..."
    - rm -r test-data
	- ls
run_lint_tests:
  image: alpine:3.15.1
  stage: test
  before_script:
    - echo "Preparing test data"
  script:
    - echo "Running lint tests..."
  after_script:
    - echo "Cleaning up temporary file..."

build_image:
  variables:
    image_repository: docker.io/my-docker-id/myapp
	image_tag: v1.0
  only:
   - main
  stage: build
  script:
    - echo "Building the docker image..."
#	- wrong_command
	- echo "Tagging the docker image $image_repository:$image_tag ..."
	
push_image:
  only:
   - main
  stage: build
  needs:
    - build_image
  script:
    - echo "Logging into docker registry..."
	- echo "Pushing docker image $image_repository:$image_tag to registry..."
	
deploy_image:
  only:
   - main
  stage: deploy
  script:
    - echo "Deploying new docker image to the $DEPLOYMENT_ENVIRONMENT..."  
	- echo "Deploying new docker image $image_repository:$image_tag to the $DEPLOYMENT_ENVIRONMENT using the following configuration file - $PROPERTIES_FILE ..." 
	- cat $PROPERTIES_FILE
